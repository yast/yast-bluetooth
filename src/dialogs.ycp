/**
 * File:	include/bluetooth/dialogs.ycp
 * Package:	Configuration of bluetooth
 * Summary:	Dialogs definitions
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 */

{

textdomain "bluetooth";

import "Label";
import "Wizard";
import "Bluetooth";
import "String";

include "bluetooth/helps.ycp";

string YES = _("Yes");
string NO = _("No");

string listen = "--listen --role NAP";
string search = "--search";


void RefreshGlobalWidgets() {
	boolean BTenabled = (boolean) UI::QueryWidget(`id(`BTenable), `Value);
	UI::ChangeWidget(`id(`services), `Enabled, BTenabled);
	UI::ChangeWidget(`id(`security), `Enabled, BTenabled);
	UI::ChangeWidget(`id(`fr), `Enabled, BTenabled);
}

/**
 * Show global settings dialog - enable/disable bluetooth support, some global general options
 * @return symbol dialog result
 */
symbol GlobalOptionsDialog () {

    /* Bluetooth global settings dialog caption */
    string caption = _("Bluetooth Configuration");

    /* Bluetooth global settings dialog content */
    term contents = `RadioButtonGroup(`id(`rb),
	`HBox(
	    `HSpacing(3),
	    `VBox(
		`Left(`RadioButton(`id(`BTdisable), `opt(`notify), _("&Disable Bluetooth Services"), !Bluetooth::enabled)),
		`VSpacing(1),
		`Left(`RadioButton(`id(`BTenable), `opt(`notify), _("&Enable Bluetooth Services"), Bluetooth::enabled)),
		`VSpacing(0.5),

		`HBox(
		    `HSpacing(4),
		    `Frame(`id(`fr), _("Basic configuration"),
			`VBox(
			    `HBox(
				`HSpacing(1),
				`Password(`id(`pin), _("I&dentification Number (PIN)"), Bluetooth::pin),
				`HSpacing(1)
			    ),
			    `VSpacing(0.2)
			)
		    ),
		    `HSpacing(1)
		),

		`VSpacing(1),
		`PushButton(`id(`services), _("Advanced &Daemon Configuration...")),
		`VSpacing(0.5),
		`PushButton(`id(`security), _("&Security Options..."))
	    )
	)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["global"]:"",
	    Label::BackButton(), Label::FinishButton());

    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton());

    // allow only numbers in PIN widget
    UI::ChangeWidget(`id(`pin), `ValidChars, "0132456789");

    RefreshGlobalWidgets();

    symbol ret = nil;

    while (true) {

	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel)
	{
	    if (ReallyAbort()) break;
	    else continue;
	}
        else if (ret == `back)
	{
            break;
        }
	else if (ret == `next || ret == `security || ret == `services)
	{
	    Bluetooth::pin = (string) UI::QueryWidget(`id(`pin), `Value);
	    Bluetooth::enabled = (boolean) UI::QueryWidget(`id(`BTenable), `Value);
	    break;
	}
	else if (ret == `BTenable || ret == `BTdisable)
	{
	    RefreshGlobalWidgets();
	}
        else
	{
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    Wizard::RestoreBackButton();
    Wizard::RestoreAbortButton();

    return ret;
}

void RefreshExpertWidgets() {
    boolean enable = (boolean) UI::QueryWidget(`id(`other), `Value);

    UI::ChangeWidget(`id(`args), `Enabled, enable);
}

/**
 * Dialog for expert configuration of the selected bluetooth daemon.
 * @return map dialog result
 */
map<string,any> DaemonExpertPopup(string daemon, string arguments) {

    /* Dialog caption - daemon configuration */
    string caption = sformat(_("%1 Daemon Configuration"), daemon);

    string arguments_nows = String::CutBlanks(arguments);

    term pand_option = `VBox(
	`VSpacing(1),
	`RadioButtonGroup(`id(`rbg),
	    `VBox(
		`Left(`RadioButton(`id(`listen), `opt(`notify), _("Set network dameon to &listen mode"), arguments_nows == listen)),
		`VSpacing(0.2),
		`Left(`RadioButton(`id(`search), `opt(`notify), _("Set network daemon to &search mode"), arguments_nows == search)),
		`VSpacing(0.2),
		`Left(`RadioButton(`id(`other), `opt(`notify), _("&Other settings"), arguments_nows != listen && arguments_nows != search))
	    )
	)
    );

    /* Daemon configuration dialog content */
    term contents = `VBox(
	`Heading(caption),
	(daemon == "PAND") ? pand_option : `Empty(),
	`HBox(
	    (daemon == "PAND") ? `HSpacing(3) : `HSpacing(1),
	    `TextEntry(`id(`args), _("&Daemon Arguments"), arguments),
	    `HSpacing(1)
	),
	`VSpacing(1),
	`HBox(
	    `HStretch(),
	    `HWeight(1, `PushButton(`id(`ok), `opt(`key_F10, `default), Label::OKButton())),
	    `HSpacing(2),
	    `HWeight(1, `PushButton(`id(`cancel), `opt(`key_F9), Label::CancelButton())),
	    `HStretch()
	)
    );

    UI::OpenDialog(contents);

    UI::SetFocus(`id(`ok));

    if (daemon == "PAND")
    {
	RefreshExpertWidgets();
    }

    symbol ret = nil;

    while (true) {
	ret = (symbol) UI::UserInput();

        if (ret == `ok || ret == `cancel) {
            break;
        }
	else if (ret == `listen || ret == `search || ret == `other)
	{
	    if (daemon == "PAND")
	    {
		RefreshExpertWidgets();
	    }
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    map<string,any> r = $[ "ret" : ret];

    if (ret == `ok)
    {
	string text = "";

	if (UI::QueryWidget(`id(`rbg), `CurrentButton) == `listen)
	{
	    text = listen;
	}
	else if (UI::QueryWidget(`id(`rbg), `CurrentButton) == `search)
	{
	    text = search;
	}
	else
	{
	    text = (string) UI::QueryWidget(`id(`args), `Value);
	}

	r = add(r, "text", text);
    }

    UI::CloseDialog();

    return r;
}


list<term> CreateDaemonTableTerm(list<map<string,any> > daemons, map<string,string> descriptions) {
    list<term> ret = [];

    if (daemons != nil)
    {
	string pand_mode = "";

	foreach(map<string,any> config, daemons, ``{
		string dname = config["service"]:"";

		if (dname == "PAND")
		{
		    string arguments_nows = String::CutBlanks(config["args"]:"");

		    if (arguments_nows == listen)
		    {
			pand_mode = " (listen mode)";
		    }
		    else if (arguments_nows == search)
		    {
			pand_mode = " (search mode)";
		    }
		}

		ret = add(ret, `item(`id(dname), dname,
		    (config["enabled"]:false ? YES : NO), (descriptions[dname]:"") + (dname == "PAND" ? pand_mode : "")));
	    }
	);
    }

    return ret;
}

/**
 * Dialog for configuration bluetooth daemons.
 * @return symbol dialog result
 */
symbol DaemonDialog () {

    list<map<string,any> > BTsettings = Bluetooth::daemons;

    /* caption in bluetooth services configuration dialog */
    string caption = _("Bluetooth Daemon Configuration");

    list<term> table = CreateDaemonTableTerm(BTsettings, daemon_descriptions);

    /* Bluetooth configuration dialog content */
    term contents = `VBox(
	`Left(`Label(_("Current Available Daemons:"))),
	`Table(`id(`daemons), `header(_("Daemon"), _("Enabled"), _("Description")), table),
	`VSpacing(0.5),
	`HBox(
	    `PushButton(`id(`enable), _("&Enable")),
	    `PushButton(`id(`disable), _("&Disable")),
	    `HSpacing(2),
	    `PushButton(`id(`expert), _("E&dit...")),
	    `HStretch()
	),
	`VSpacing(1)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["daemon"]:"",
	    Label::BackButton(), Label::OKButton());

    symbol ret = nil;

    while (true) {
	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `enable || ret == `disable)
	{
	    // get current status
	    string current = (string) UI::QueryWidget(`id(`daemons), `CurrentItem);

	    // find current options
	    BTsettings = maplist(map<string,any> d, BTsettings, ``{
		    if (d["service"]:"" == current)
		    {
			d["enabled"] = ret == `enable;
		    }

		    return d;
		}
	    );

	    // refresh dialog content
	    UI::ChangeWidget(`id(`daemons), `Item(current, 1), (ret == `enable) ? YES : NO);
	}
        else if (ret == `next) {
	    Bluetooth::daemons = BTsettings;
            break;
        }
        else if (ret == `back) {
            break;
        }
	else if (ret == `expert)
	{
	    string current = (string) UI::QueryWidget(`id(`daemons), `CurrentItem);

	    boolean pand_changed = false;

	    // update setting
	    BTsettings = maplist(map<string,any> d, BTsettings, ``{
		    if (d["service"]:"" == current)
		    {
			map<string,any> result = DaemonExpertPopup(current, d["args"]:"");

			if (result["ret"]:nil == `ok)
			{
			    string arg = result["text"]:"";

			    pand_changed = (d["service"]:"" == "PAND" && d["args"]:"" != arg);

			    d["args"] = arg;
			}
		    }

		    return d;
		}
	    );

	    if (pand_changed)
	    {
		// update table content (PAND mode has been changed)
		table = CreateDaemonTableTerm(BTsettings, daemon_descriptions);
		UI::ChangeWidget(`id(`daemons), `Items, table);
		UI::ChangeWidget(`id(`daemons), `CurrentItem, current);
	    }
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

void RefreshSecurityWidgets() {
    boolean enable = (boolean) UI::QueryWidget(`id(`auth), `Value);
    UI::ChangeWidget(`id(`encrypt), `Enabled, enable);
}

/**
 * Dialog for configuration bluetooth daemons.
 * @return symbol dialog result
 */
symbol SecurityDialog () {

    /* caption in bluetooth services configuration dialog */
    string caption = _("Security options");


    /* Bluetooth configuration dialog content */
    term contents = `HBox(
	`HSpacing(3),
	`VBox(
	    `VSpacing(1),
	    `Frame(_("Authentification and Encryption"),
		`VBox(
		    `VSpacing(0.2),
		    `Left(`CheckBox(`id(`auth), `opt(`notify), _("&Enable Authentification"), Bluetooth::authentification)),
		    `VSpacing(0.5),
		    `Left(`CheckBox(`id(`encrypt), _("Enable En&cryption"), Bluetooth::encryption)),
		    `VSpacing(0.2)
		)
	    ),
	    `VSpacing(2),
	    `Frame(_("Scan Options"),
		`VBox(
		    `VSpacing(0.2),
		    `Left(`CheckBox(`id(`inq), _("Enable &Inquiry Scan"), Bluetooth::inquiry_scan)),
		    `VSpacing(0.5),
		    `Left(`CheckBox(`id(`page), _("Enable &Page Scan"), Bluetooth::page_scan)),
		    `VSpacing(0.2)
		)
	    ),
	    `VSpacing(1)
	),
	`HSpacing(3)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["security"]:"",
	    Label::BackButton(), Label::OKButton());

    symbol ret = nil;

    RefreshSecurityWidgets();

    while (true) {
	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
        else if (ret == `back) {
            break;
        }
	else if (ret == `next)
	{
	    Bluetooth::authentification = (boolean) UI::QueryWidget(`id(`auth), `Value);
	    Bluetooth::encryption = (boolean) UI::QueryWidget(`id(`encrypt), `Value);
	    Bluetooth::inquiry_scan = (boolean) UI::QueryWidget(`id(`inq), `Value);
	    Bluetooth::page_scan = (boolean) UI::QueryWidget(`id(`page), `Value);
	    break;
	}
	else if (ret == `auth)
	{
	    RefreshSecurityWidgets();
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


/* EOF */
}
