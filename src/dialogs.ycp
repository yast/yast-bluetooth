/**
 * File:	include/bluetooth/dialogs.ycp
 * Package:	Configuration of bluetooth
 * Summary:	Dialogs definitions
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 */

{

textdomain "bluetooth";

import "Label";
import "Wizard";
import "Bluetooth";

include "bluetooth/helps.ycp";

/**
 * Show global settings dialog - enable/disable bluetooth support, some global general options
 * @return symbol dialog result
 */
symbol GlobalOptionsDialog () {

    /* Bluetooth global settings dialog caption */
    string caption = _("Bluetooth Configuration");

    /* Bluetooth global settings dialog content */
    term contents = `RadioButtonGroup(`id(`rb),
	`HBox(
	    `HSpacing(3),
	    `VBox(
		`Left(`RadioButton(`id(`BTenable), _("&Disable Bluetooth services"))),
		`VSpacing(1),
		`Left(`RadioButton(`id(`BTdisable), _("&Enable Bluetooth services"))),
		`VSpacing(0.5),

		`HBox(
		    `HSpacing(4),
		    `Frame(_("Basic configuration"),
			`VBox(
			    `Left(`Password(`id(`pin), _("I&dentification number (PIN)")))
			)
		    ),
		    `HSpacing(1)
		),

		`VSpacing(1),
		`PushButton(`id(`services), _("Advanced &Daemon Configuration...")),
		`VSpacing(0.5),
		`PushButton(`id(`security), _("&Security Options..."))
	    )
	)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["global"]:"",
	    Label::BackButton(), Label::FinishButton());

    Wizard::HideBackButton();
    Wizard::SetAbortButton(`abort, Label::CancelButton());

    // allow only numbers in PIN widget
    UI::ChangeWidget(`id(`pin), `ValidChars, "0132456789");

    symbol ret = nil;

    while (true) {

	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
        else if (ret == `next || ret == `back || ret == `security || ret == `services) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    Wizard::RestoreBackButton();
    Wizard::RestoreAbortButton();

    return ret;
}

/**
 * Dialog for expert configuration of the selected bluetooth daemon.
 * @return map dialog result
 */
map<string,any> DaemonExpertPopup(string daemon, string arguments) {

    /* Dialog caption - daemon configuration */
    string caption = sformat(_("%1 Daemon Configuration"), daemon);

    term pand_option = `VBox(
	`VSpacing(1),
	`RadioButtonGroup(`id(`rbg),
	    `VBox(
		`Left(`RadioButton(`id(`listen), _("Set network dameon to &listen mode"))),
		`VSpacing(0.2),
		`Left(`RadioButton(`id(`search), _("Set network daemon to &search mode"))),
		`VSpacing(0.2),
		`Left(`RadioButton(`id(`other), _("&Other settings")))
	    )
	)
    );

    /* Daemon configuration dialog content */
    term contents = `VBox(
	`Heading(caption),
	(daemon == "PAND") ? pand_option : `Empty(),
	`HBox(
	    (daemon == "PAND") ? `HSpacing(3) : `HSpacing(1),
	    `TextEntry(`id(`args), _("&Daemon Arguments"), arguments),
	    `HSpacing(1)
	),
	`VSpacing(1),
	`HBox(
	    `HStretch(),
	    `HWeight(1, `PushButton(`id(`ok), `opt(`key_F10, `default), Label::OKButton())),
	    `HSpacing(2),
	    `HWeight(1, `PushButton(`id(`cancel), `opt(`key_F9), Label::CancelButton())),
	    `HStretch()
	)
    );

    UI::OpenDialog(contents);

    UI::SetFocus(`id(`ok));

    symbol ret = nil;

    while (true) {
	ret = (symbol) UI::UserInput();

        if (ret == `ok || ret == `cancel) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    map<string,any> r = $[ "ret" : ret];

    if (ret == `ok)
    {
	string text = (string) UI::QueryWidget(`id(`args), `Value);
	r = add(r, "text", text);
    }

    UI::CloseDialog();

    return r;
}

/**
 * Dialog for configuration bluetooth daemons.
 * @return symbol dialog result
 */
symbol DaemonDialog () {

    /* caption in bluetooth services configuration dialog */
    string caption = _("Bluetooth Daemon Configuration");

    list<term> table = [`item(`id(`HCID), "HCID", "yes", "HCI Daemon descriptive summary..."),
	`item(`id(`SDP), "SDP", "yes", "SDP Daemon"),
	`item(`id(`OPD), "OPD", "yes", "OPD Daemon"),
	`item(`id(`RFCOMM), "RFCOMM", "yes", "RFCOMM Daemon"),
	`item(`id(`PAND), "PAND", "yes", "PAND Daemon"),
	`item(`id(`DUND), "DUND", "yes", "DUND Daemon"),
	`item(`id(`HID), "HID", "yes", "HID Daemon"),
	`item(`id(`HID2HCI), "HID2HCI", "yes", "HID2HCI Daemon"),
    ];

    /* Bluetooth configuration dialog content */
    term contents = `VBox(
	`Left(`Label(_("Current Available Daemons:"))),
	`Table(`id(`daemons), `header(_("Daemon"), _("Enabled"), _("Description")), table),
	`VSpacing(0.5),
	`HBox(
	    `PushButton(`id(`enable), _("&Enable")),
	    `PushButton(`id(`disable), _("&Disable")),
	    `HSpacing(2),
	    `PushButton(`id(`expert), _("E&dit...")),
	    `HStretch()
	),
	`VSpacing(1)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["daemon"]:"",
	    Label::BackButton(), Label::OKButton());

    symbol ret = nil;

    while (true) {
	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `enable || ret == `disable)
	{
	    // TODO handle buttons
	}
        else if (ret == `next || ret == `back) {
            break;
        }
	else if (ret == `expert)
	{
	    DaemonExpertPopup("PAND", "-a -b -c");
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


/**
 * Dialog for configuration bluetooth daemons.
 * @return symbol dialog result
 */
symbol SecurityDialog () {

    /* caption in bluetooth services configuration dialog */
    string caption = _("Security options");


    /* Bluetooth configuration dialog content */
    term contents = `HBox(
	`HSpacing(3),
	`VBox(
	    `VSpacing(1),
	    `Frame(_("Authentification and Encryption"),
		`VBox(
		    `VSpacing(0.2),
		    `Left(`CheckBox(`id(`auth), _("&Enable Authentification"))),
		    `VSpacing(0.5),
		    `Left(`CheckBox(`id(`encrypt), _("Enable En&cryption"))),
		    `VSpacing(0.2)
		)
	    ),
	    `VSpacing(2),
	    `Frame(_("Scan Options"),
		`VBox(
		    `VSpacing(0.2),
		    `Left(`CheckBox(`id(`inq), _("Enable &Inquiry Scan"))),
		    `VSpacing(0.5),
		    `Left(`CheckBox(`id(`page), _("Enable &Page Scan"))),
		    `VSpacing(0.2)
		)
	    ),
	    `VSpacing(1)
	),
	`HSpacing(3)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["security"]:"",
	    Label::BackButton(), Label::OKButton());

    symbol ret = nil;

    while (true) {
	ret = (symbol) UI::UserInput();

	/* abort? */
	if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `enable || ret == `disable)
	{
	    // TODO handle buttons
	}
        else if (ret == `next || ret == `back) {
            break;
        }
	else if (ret == `expert)
	{
	    DaemonExpertPopup("HCID", "-a -b -c");
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


/* EOF */
}
